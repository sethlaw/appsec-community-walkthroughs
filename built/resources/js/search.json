[[{"l":"Home"},{"l":"AppSec Community Walkthroughs","p":["Welcome to the SaintCon Application Security Walkthroughs, a collection of tutorials to familiarize you with various application security tools."]}],[{"l":"Application Security Community Walkthrough"},{"l":"Zap","p":["Zap is a Dynamic Application Security Testing (DAST) tool for web applications. It allows for both scripted and interactive scanning.","Zap was originally an OWASP project. It is currently in transition to be part of the Software Security Project"]},{"l":"Starting up","p":["when you start ZAP you will get a screen like this:","For now let's not persist our session:","This will leave you on the home screen:","We will be going over \"Manual Explore\" more in a different walkthrough."]}],[{"l":"Application Security Community Walkthrough"},{"l":"Zap HUD","p":["Zap's HUD functionality is an overlay that provides access to tools you can use while testing a site dynamically.","Some of the benefits of using the HUD over one of the static scripts are:","First contact with a web application. When you first encounter a web application you will not have existing scripts. The HUD can help you do some basic analysis to determine what should be scripted specifically for the future.","Authentication. Since ZAP is a proxy and the HUD is an overlay for sites running through that proxy you can use the dynamic assessment capabilities to manually authenticate, especially when authentication requires 2FA or the authentication information is too sensitive to leave in a script."]},{"l":"Zap HUD tutorial","p":["Zap HUD already has a good built-in tutorial for what features it supplies and some practices exercises on using various features it provides.","Rather than a feature by feature walkthrough this walkthrough will be how to access that tutorial. Note that any flags in that tutorial are not part of the (Hacker's Challenge)[https://www.saintcon.org/con-hackerschallenge/]"]},{"l":"Manual Explore","p":["From the ZAP home screen, chose the option \"manual explore\". This will take to to a screen such as this:"]},{"l":"Setup"},{"l":"URL to Explore","p":["For URL to explore you will want to use the URL of a test site you have permission to access, never a third party or production site.","Anything running on your local host, such as the SAINTCON 2023 AppSec challenge app or Juice Shop, should be fine."]},{"l":"Other Options","p":["Choose \"Enable HUD\".","After choosing your favorite browser click \"launch browser\". We recommend one that allows test automation, such as Chrome.","This will open up the Zap HUD:"]},{"l":"Tutorial","p":["If you have never opened the HUD before you can select \"Take the tutorial\" rather than \"Continue to your target\".","If you have taken the tutorial before or are on a shared computer where someone else has taken it before you can reset the tutorial by:","Open the HUD settings","From here you can choose to reset the tutorial:"]}],[{"l":"Application Security Community Walkthrough"},{"l":"Source Composition Analysis Walkthrough","p":["Source composition analysis (SCA) tools scan third-party libraries used in a project, check them for known vulnerabilities, and generate output on findings. Using an intentionally vulnerable application called OWASP NodeGoat as a target, this tutorial will walkthrough using two free SCA tools:","npm audit: npm is a software registry that developers can interact with using the command line interface (CLI). This CLI includes npm audit, which scans a project for vulnerable dependencies.","OWASP Dependency-Check: An OWASP tool that checks a project's dependencies for publicly disclosed vulnerabilities. If any are found, it generates a report that includes associated Common Vulnerability Enumeration (CVE) identifiers for each finding.","After running each tool, we'll analyze the results.","Lastly, we'll cover managing vulnerable dependencies and share an example of how to update some of them."]},{"i":"step-1---setup","l":"Step 1 - Setup","p":["If you are using a laptop at the SAINTCON AppSec booth, please skip this step and proceed to Step 2.","These instructions are for using the Linux distribution Ubuntu. If you're using macOS or Windows, please refer to each project's platform specific instructions:","npm","OWASP Dependency-Check","For simplicity, this walkthrough will use the Downloads and Documents directories as destinations for the target code and SCA tools. For best practice recommendations on locations and environment variables, please refer to the above URLs."]},{"i":"step-11---setup-npm","l":"Step 1.1 - Setup npm","p":["To check whether Node.js and npm are already installed, run these commands in the terminal:","Install nodejs:","Install npm:"]},{"i":"step-12---setup-nodegoat","l":"Step 1.2 - Setup NodeGoat","p":["You'll need git installed for this step. If it's not yet installed, then follow these instructions first.","Clone the repository locally to your computer. For example, you could create a new directory in your Documents directory:","Switch to your destination directory and clone NodeGoat:"]},{"i":"step-13---setup-owasp-dependency-check","l":"Step 1.3 - Setup OWASP Dependency-Check","p":["Check whether the current version of Java is installed:","Install Java:","Download OWASP Dependency-Check to your Downloads directory using either a browser or using a command line tool like curl.","Unzip the downloaded file:"]},{"i":"step-2---run-the-sca-tools","l":"Step 2 - Run the SCA tools"},{"i":"step-21---run-npm-audit","l":"Step 2.1 - Run npm audit","p":["Switch to the NodeGoat directory:","Run npm audit using the following command:","Review the results of the scan in the output within the terminal, it should be similar to this:"]},{"i":"step-21---run-owasp-dependency-check","l":"Step 2.1 - Run OWASP Dependency-Check","p":["Switch to the Dependency-Check bin directory:","Run Dependency-Check against the local NodeGoat project:","Review the results by opening the \"dependency-check-report.html\" file generated in the bin directory. Notice that the report begins with high level details in the \"Scan Information\" section, then provides more details in the \"Summary\" and \"Dependencies\" sections."]},{"i":"step-22---compare-the-results","l":"Step 2.2 - Compare the results","p":["Notice that npm audit and Dependency-Check return different finding counts. From viewing the reports, what do you notice different between them?"]},{"i":"step-3---fix-vulnerabilities","l":"Step 3 - Fix vulnerabilities","p":["npm audit includes an option that attempts to update identified vulnerable dependencies. Some findings can't be fixed this way due to factors like transitive dependencies.","Before running this in an actual development environment, consult with the developer(s) responsible for the project. Automatically updating dependencies should be accompanied with proper testing and validation to prevent errors due to breaking changes.","For more context on managing vulnerable dependencies, please refer to the OWASP Vulnerable Dependency Management Cheat Sheet."]},{"i":"step-21---run-npm-audit-fix","l":"Step 2.1 - Run npm audit fix","p":["Switch back to the NodeGoat directory using the command from Step 2.1.1 and run npm audit fix:","View the output details and notice that some don't have fixes and some are breaking changes. It should be similar to this:"]}],[{"l":"Application Security Community Walkthrough"},{"l":"Semgrep Walkthrough","p":["This tutorial will walkthrough the using the open-source version of Semgrep Code, a Fast, customizable, and developer-oriented SAST. It will be run against an intentionally-vulnerable, task managament application, VTM that is used in training developers about secure coding topics."]},{"i":"step-1---setup","l":"Step 1 - Setup","p":["Semgrep OSS is a command-line tool and requires a terminal to run. Open up a terminal window.","Insure that semgrep is installed on the local system by running which semgrep.","If you get message semgrep not found, flag down a volunteer so they can correct the problem. You can also fix the problem by running pip install semgrep","Now that we know semgrep is installed and available, open up a terminal window and make sure that the vtm source code is included in the current user's home folder:","If this folder does not exist, clone vtm from GitHub using the command git clone https://github.com/redpointsec/vtm."]},{"i":"step-2---run-a-sast-scan","l":"Step 2 - Run a SAST scan","p":["Now that we have the code and tool available, run a scan using the default rules from the Semgrep team as follows:","semgrep scan --config auto .","This will output something similar to the following after doing analysis on the source code files that exist in the targeted directory."]},{"i":"step-3---run-a-targeted-sast-scan","l":"Step 3 - Run a targeted SAST scan","p":["One thing to note from the results is that the scan is attempting to analyze all available source files that it can match, including Python, JavaScript, XML, JSON, or anything else in that directory.","Given that VTM is a Django/Python application, we can scan specifically for known Django issues from the Semgrep registry ( https://semgrep.dev/r). This is accomplished by running the following command:","semgrep scan --config p/django vtm"]},{"i":"step-4---review-output","l":"Step 4 - Review Output","p":["As with any automated tool, false positives are a possibility. Before adding SAST findings to the development backlog, we need to review and confirm the issues.","By default, Semgrep outputs findings to the terminal. These results can be saved to a file by specifying -o out-file at the end of the command.","In this case, we will review a SQL Injection finding. Semgrep gives us the following finding from the vtm/taskManager/views.py source file:","While this is a good start, we also want to confirm the issues through source code inspection. Opening up the views.py file we find that the call to User.objects.raw is found within the forgot_password function and does indeed take user input directly from the email parameter."]},{"l":"Resources","p":["Semgrep- Static Analysis Tool used to identify security issues in source code","Vulnerable Task Manager- Intentionally vulnerable application we will target during this walkthrough."]}]]